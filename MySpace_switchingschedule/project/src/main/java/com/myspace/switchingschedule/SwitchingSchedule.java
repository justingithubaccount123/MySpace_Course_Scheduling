package com.myspace.switchingschedule;

/**
 * This class was automatically generated by the data modeler tool.
 */

/*
 *  The most important operations of the SwitchingSchedule class are the addInstruction methods.
 *  
 *  addInstruction(section, Asset , stateOrAction, remarks) 
 *   - To perform a action or state change on an asset.

 *  addInstructionUnique(section, Asset , stateOrAction, remarks, matchType(MatchKey or MatchFull)) 
 *   - Will check if a similar instruction exists before adding.
 *   - The match can be based on the Key (section, Asset , stateOrAction) or Full (section, Asset , stateOrAction, remarks)
 *   
 *  addInstruction(section, action, remarks)
 *   - To apply a general action that is not related to an asset e.g. comment.
 *   
 *  addInstruction(section, actionName, actionVerb, remarks)
 *   - Allows full control over all the setting of the actionName and actionVerb.
 *   - Should only be used if the above methods won't work.
 *   - As the actionName is not validated it could lead to integration errors with PoF.
 *  
 *  A valid State or Action is defined in the StateAction class and include:
 *  
 *  	// State values
 *		// Protection Devices
 *		ENABLED, DISABLED
 *		// Isolation Points
 *		OPENED, CLOSED, OPENEDTAGGED, CLOSEDTAGGED, TAGGED, REMOVEDTAG
 *		
 *		// Action values
 *		// Protection Devices
 *		ENABLE, DISABLE
 *		// Isolation Points
 *		OPEN, CLOSE, OPENTAG, CLOSETAG, TAG, REMOVETAG 
 *		//General
 *		COMMENT
 *  
 */

public class SwitchingSchedule implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public static final int MATCHKEY = 1;
	public static final int MATCHFULL = 2;

	@org.kie.api.definition.type.Label("counter to keep track of the current instruction number to help with sorting and sequencing instructions.")
	private Integer instructionCnt = 0;
	private java.lang.String appId;
	@org.kie.api.definition.type.Label("List of the all the instructions created while building the switching schedule.")
	//private java.util.List<com.myspace.switchingschedule.SwitchingStep> steps;
	private java.util.List<com.myspace.switchingschedule.SwitchingInstruction> instructions;
	
	private DefaultAction[] defaultActions;

	public java.lang.String getAppId() {
		return this.appId;
	}

	public void setAppId(java.lang.String appId) {
		this.appId = appId;
	}

	public java.util.List<com.myspace.switchingschedule.SwitchingInstruction> getInstructions() {
		return this.instructions;
	}

	public void setInstructions(
			java.util.List<com.myspace.switchingschedule.SwitchingInstruction> instructions) {
		this.instructions = instructions;
	}


	public Integer getInstructionCnt() {
		return instructionCnt;
	}
	
	public void setDefaultActions(DefaultAction[] defaultActions) {
		this.defaultActions = defaultActions;
	}
	

	public int addInstruction(SwitchingScheduleSection section, Asset asset, String stateOrAction, String remarks) {
		instructionCnt = instructionCnt + 1;
		SwitchingInstruction s = new SwitchingInstruction(instructionCnt, section, asset,
				stateOrAction, asset.lookupActionName(stateOrAction, defaultActions), asset.lookupActionVerb(stateOrAction, defaultActions), remarks);
		instructions.add(s);
		//System.out.println(s.print());
		return instructionCnt;
	}

	public int addInstructionUnique(SwitchingScheduleSection section, Asset asset, String stateOrAction, String remarks, int matchType) {
		boolean exists = false;
		for (SwitchingInstruction instruction : instructions) {
			if ((section == instruction.getSection() && asset.getId().equals(instruction.getAsset().getId()) && stateOrAction.equals(instruction.getStateOrAction())
				&& matchType == MATCHFULL && ((remarks == null && instruction.getRemarks() == null) || remarks.equals(instruction.getRemarks()))) 
					||
				(section == instruction.getSection() && asset.getId().equals(instruction.getAsset().getId()) && stateOrAction.equals(instruction.getStateOrAction()))) {
				exists = true;
				break;
			}
		}
		if (!exists)
			addInstruction( section,  asset,  stateOrAction,  remarks);
		return instructionCnt;
	}
	
	public int addInstruction(SwitchingScheduleSection section, String action, String remarks) {
		String actionVerb = null;
		String actionName = null;

		if (defaultActions != null) {
			for (DefaultAction da : defaultActions) {
			    if (da.getAction().equals(action) && da.getAssetType() == null) {
			    	actionVerb = da.getActionVerb();
			        break;
			    }
			}

			for (DefaultAction da : defaultActions) {
			    if (da.getAction().equals(action) && da.getAssetType() == null) {
			    	actionName = da.getActionName();
			        break;
			    }
			}
		}
		
		instructionCnt = instructionCnt + 1;
		SwitchingInstruction s = new SwitchingInstruction(instructionCnt, section, null,
				action, actionName, actionVerb, remarks);
		instructions.add(s);
		//System.out.println(s.print());
		return instructionCnt;
	}
	
	public int addInstruction(SwitchingScheduleSection section, String actionName, String actionVerb, String remarks) {
		instructionCnt = instructionCnt + 1;
		SwitchingInstruction s = new SwitchingInstruction(instructionCnt, section, null,
				null, actionName, actionVerb, remarks);
		instructions.add(s);
		//System.out.println(s.print());
		return instructionCnt;
	}
	
	/*
	public int addInstruction(String part, String assetId, String state, String actionName, String actionVerb,
			String remarks) {
		instructionCnt = instructionCnt + 1;
		SwitchingInstruction s = new SwitchingInstruction(instructionCnt, part, assetId,
				state, actionName, actionVerb, remarks);
		instructions.add(s);
		System.out.println(s.print());
		return instructionCnt;
	}
	*/
	
	public SwitchingSchedule() {
		super();
		instructions = new java.util.ArrayList<SwitchingInstruction>();
	}

	public SwitchingSchedule(DefaultAction[] defaultActions) {
		super();
		instructions = new java.util.ArrayList<SwitchingInstruction>();
		this.defaultActions = defaultActions;
	}
	
	public SwitchingSchedule(java.lang.String appId,
			java.util.List<com.myspace.switchingschedule.SwitchingInstruction> instructions) {
		super();
		instructions = new java.util.ArrayList<SwitchingInstruction>();
		this.appId = appId;
		this.instructions = instructions;
	}

	public SwitchingSchedule(java.lang.Integer instructionNum,
			java.lang.String appId,
			java.util.List<com.myspace.switchingschedule.SwitchingInstruction> instructions) {
		super();
		this.instructionCnt = instructionNum;
		this.appId = appId;
		this.instructions = instructions;
	}
}