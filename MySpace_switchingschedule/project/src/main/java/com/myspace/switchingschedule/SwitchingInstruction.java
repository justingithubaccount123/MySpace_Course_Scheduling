package com.myspace.switchingschedule;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class SwitchingInstruction implements java.io.Serializable, Comparable<SwitchingInstruction> {

	static final long serialVersionUID = 1L;

	public static final SwitchingScheduleSection HEADER = new SwitchingScheduleSection(1, "Header");
	public static final SwitchingScheduleSection POWERFLOW = new SwitchingScheduleSection(2, "PowerFlow");
	public static final SwitchingScheduleSection CHECK = new SwitchingScheduleSection(3, "Check");
	public static final SwitchingScheduleSection INITIAL = new SwitchingScheduleSection(4, "Inital");
	public static final SwitchingScheduleSection PROTECTION = new SwitchingScheduleSection(5, "Protection");
	public static final SwitchingScheduleSection ISOLATION = new SwitchingScheduleSection(6, "Isolation");
	public static final SwitchingScheduleSection SAFETY = new SwitchingScheduleSection(7, "Safety");
	public static final SwitchingScheduleSection SPECIAL = new SwitchingScheduleSection(8, "Special");
	public static final SwitchingScheduleSection RESTORATIONHEADER = new SwitchingScheduleSection(9, "RestorationHeader");
	public static final SwitchingScheduleSection REVERSESPECIAL = new SwitchingScheduleSection(10, "ReverseSpecial");
	public static final SwitchingScheduleSection REMOVESAFETY = new SwitchingScheduleSection(11, "RemoveSaftey");
    public static final SwitchingScheduleSection RESTOREPROTECTION = new SwitchingScheduleSection(12, "RestoreProtection");
    public static final SwitchingScheduleSection PARTIALRESTORE = new SwitchingScheduleSection(13, "PartialRestore");
    public static final SwitchingScheduleSection TEST = new SwitchingScheduleSection(14, "Test");
    public static final SwitchingScheduleSection FULLRESTORE = new SwitchingScheduleSection(15, "FullRestore");
    public static final SwitchingScheduleSection REVERSECHECK = new SwitchingScheduleSection(16, "ReverseCheck");
    public static final SwitchingScheduleSection FINAL = new SwitchingScheduleSection(17, "Final");

	@org.kie.api.definition.type.Label("Sequence number auto created when a instruction is added through the SwitchingSchedule object.")
	private Integer id; // Instruction ID (sequence number) e.g. 1.2.1
	@org.kie.api.definition.type.Label("The logical part of the swicthcing schedule the instruction belong to e.g. Protection, Isolation, Safety, Restoration")
	@org.kie.api.definition.type.Description("Possible value HEADER, INITIAL, POWERFLOW, PROTECTION, ISOLATION, SAFETY, RESTORATIONHEADER, REMOVESAFETY, RESTOREPROTECTION, TEST, RESTORE,  FINAL")
	private SwitchingScheduleSection section; // Header, Inital, PowerFlow, Isolation, Safety,
							// RestorationHeader, RemoveSaftey, Test, Restore,
							// Final
	@org.kie.api.definition.type.Label("Note could store the asset object that way I have acces to other attribues e.g. location etc.")
	private Asset asset; // AssetID/Apparatus
	@org.kie.api.definition.type.Label("PoF ActionVerb that needs to be executed")
	private String actionVerb;
	@org.kie.api.definition.type.Label("State change or Action that will be set as part of the switching operation.")
	private String stateOrAction;
	private java.lang.String remarks;

	private java.lang.String actionName;

	public SwitchingInstruction() {
	}

	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}

	public SwitchingScheduleSection getSection() {
		return section;
	}

	public void setPart(SwitchingScheduleSection section) {
		this.section = section;
	}

	public Asset getAsset() {
		return asset;
	}
	public void setAsset(Asset asset) {
		this.asset = asset;
	}

	public String getActionVerb() {
		return actionVerb;
	}
	public void setActionVerb(String actionVerb) {
		this.actionVerb = actionVerb;
	}

	public String print() {
		return String.format("%-3s", id)
				+ " PART: " + String.format("%-17s", (section != null ? section : "NULL"))
				+ " S/A: " + String.format("%-10s", (stateOrAction != null ? stateOrAction : "NULL"))
				+ " ASSET: " + String.format("%-15s", (asset != null ? (asset.getId() != null ? asset.getId() : "NULL") : "asset(NULL)"))
				+ " A_NAME: " + String.format("%-23s", (actionName != null ? actionName : "NULL"))
				+ " LOC: " + (asset != null ? (asset.getLocation() != null ? asset.getLocation() : "NULL") : "asset(NULL)")
				+ "\n   "
				+ (actionVerb != null ? " A_VERB: \"" + actionVerb + "\"    " : "")
				+ (remarks != null ? " REMARKS: \"" + remarks  + "\"" : "");
	}

	@Override
	public String toString() {
		return "SwitchingInstruction [id=" + id + ", asset=" + asset + ", section=" + section
				+ ", stateOrAction="	+ stateOrAction+ ", actionName=" + actionName
				+ ", actionVerb=" + actionVerb + ", remarks=" + remarks
				+ "]";
	}

	public java.lang.String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(java.lang.String remarks) {
		this.remarks = remarks;
	}

	public java.lang.String getStateOrAction() {
		return this.stateOrAction;
	}

	public void setStateOrAction(java.lang.String stateOrAction) {
		this.stateOrAction = stateOrAction;
	}

	public java.lang.String getActionName() {
		return this.actionName;
	}

	public void setActionName(java.lang.String actionName) {
		this.actionName = actionName;
	}

	public SwitchingInstruction(java.lang.Integer id, SwitchingScheduleSection section,
			Asset asset, java.lang.String stateOrAction, java.lang.String actionName, java.lang.String actionVerb,
			 java.lang.String remarks) {
		this.id = id;
		this.section = section;
		this.asset = asset;
		this.actionVerb = actionVerb;
		this.stateOrAction = stateOrAction;
		this.remarks = remarks;
		this.actionName = actionName;
	}
	
	public int compareTo(SwitchingInstruction si) {
		int order = this.section.getSequence() - si.section.getSequence();
		if (order == 0) order = this.id - si.id;
		return order; 
	}
}